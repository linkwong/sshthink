-- 激活脚本按键设定
ActiveButton = 4		  -- 鼠标侧键后退
-- 主要技能回憎间隔设置
AttackFrequency = 1280   -- 回憎间隔，按照减耗能力来调节，减耗越高，这个值可以设置更大

-- ==========================================================================
-- 【测试】火多重自动查表计算杨弓实际攻速
-- ==========================================================================
-- 攻速相关数值，根据个人实际情况修改
AttackSpeedIncreased = 6 -- 杨弓自带攻击速度提高
AttackSpeedBonus = 45    -- 角色面板攻击速度加成

-- 杨弓档位表
TableAttackSpeedIncreasedAndBonus = {
    -- 0 速杨弓
    [0] = {0.0, 3.8, 8.0, 12.6, 17.4, 22.8, 28.6, 35.0, 42.2, 50.0, 58.8, 68.8, 80.0},
    -- 5 速杨弓
    [5] = { -1, 0.0, 2.8,  7.2, 11.8, 17.0, 22.4, 28.6, 35.5, 42.8, 51.2, 60.8, 71.4},
    -- 6 速杨弓
    [6] = { -1, 0.0, 2.0,  6.2, 10.8, 15.8, 21.4, 27.4, 34.0, 41.6, 49.8, 59.2, 69.8},
    -- 7 速杨弓
    [7] = { -1, 0.0, 1.0,  5.2,  9.8, 14.8, 20.2, 26.2, 32.8, 40.2, 48.4, 57.8, 68.2}
}
-- 杨弓实际攻速表(借用got6666提供的档位表)
TableActualAttackSpeed = {
    2.2222222,
    2.3076923,
    2.4000000,
    2.5000000,
    2.6086957,
    2.7272727,
    2.8571429,
    3.0000000,
    3.1578947,
    3.3333333,
    3.5294118,
    3.7500000,
    4.0000000,
}
local TableAttackSpeedBonus = TableAttackSpeedIncreasedAndBonus[AttackSpeedIncreased]
local ActualAttackSpeed = TableActualAttackSpeed[1]
for I = 1, #TableAttackSpeedBonus do
    if AttackSpeedBonus < TableAttackSpeedBonus[I] then
        break
    end
    ActualAttackSpeed = TableActualAttackSpeed[I] -- 自动查表计算得出多重杨弓实际攻速
end
-- ==========================================================================


--[[
=============================================================================
=                            定义需要定时释放的技能                            =
=============================================================================
  参数说明：
    [技能名称] = {
        [参数一] = 设备类别,
          "kb"    = 键盘；
          "mouse" = 鼠标；
        [参数二] = 自定义按键,
          鼠标左键为数值1，右键为数值3；
          键盘按键为字符型，形如"1"、"c"等；
        [参数三] = 间隔时间，单位为毫秒,
        [参数四] = 修饰键,
          当指定的修饰键被按下，该技能是否保持由“是否存在参数五”决定；
          参数五如果存在，则该技能释放间隔改为参数五指定的时间间隔；
          参数五如果不存在，则该技能不保持；
          修饰键只能为以下按键名：
            "lalt", "ralt", "alt"
            "lshift", "rshift", "shift"
            "lctrl", "rctrl", "ctrl"
          该参数可省略，则默认为不含修饰键；
        [参数五] = 特定间隔时间，单位为毫秒,
          该参数可省略，参见参数四的说明；
      },
=============================================================================
--]]

TableSkill = {
    -- 每250毫秒点击键盘2键（保持战宠，Companion）
    ["Companion"] = {
        ["Family"]     = "kb",
        ["Arg"]        = "2",
        ["Interval"]   = 250,
      },
    -- 每200毫秒点击键盘4键（保持复仇，Revenge）
    ["Revenge"] = {
        ["Family"]     = "kb",
        ["Arg"]        = "4",
        ["Interval"]   = 200,
      },
    -- 点击鼠标左键（闪避射击，EvasiveFire）
    ["EvasiveFire"] = {
        ["Family"]     = "mouse",
        ["Arg"]        = 1,
        ["Interval"]   = AttackFrequency,
        ["Modifier"]   = "ctrl",   -- 如果按下ctrl键，表示火力全开，闪避射击不再保持；
      },
    -- 点击鼠标右键（多重射击，Multishot）
    ["Multishot"] = {
        ["Family"]     = "mouse",
        ["Arg"]        = 3,
        ["Interval"]   = math.ceil(1000/ActualAttackSpeed),   -- 时间间隔由实际攻速计算得出；
        ["Modifier"]   = "ctrl",   -- 如果按下ctrl键，表示火力全开；
        ["FFInterval"] = 200,
      },
}


-- ==========================================================================
-- 以下为框架代码，勿动
-- ==========================================================================

POLL_FAMILY = "mouse"	-- 当前鼠标没有 M 键状态，正好利用来制造轮询
POLL_INTERVAL = 10		-- 在开始下一个轮询前的延时(毫秒)，用于调节轮询速率
POLL_DEADTIME = 100	-- 旧的轮询事件被耗尽的时间

-- 为了避免鼠标自动点击后，无法还原鼠标按键先前状态，特设此函数，在自动点击前后保留并还原按键状态
function PressAndReleaseMouseButtonAccurate(mArg)
    if IsMouseButtonPressed(mArg) then
        ReleaseMouseButton(mArg)
        PressMouseButton(mArg)
    else
        PressAndReleaseMouseButton(mArg)
    end
end

-- 保持键盘自动按键 协程
function KeepPressAndReleaseKey(Task)
    while Task.Run do
        if Task.Modifier ~= nil then
            if (not IsModifierPressed(Task.Modifier)) then
                PressAndReleaseKey(Task.Arg)
            elseif Task.FFInterval ~= nil then
                PressAndReleaseKey(Task.Arg)
            end
        else
            PressAndReleaseKey(Task.Arg)
        end
        Task = coroutine.yield()
        Sleep(20)
    end
end

-- 保持鼠标自动点击 协程
function KeepPressAndReleaseMouseButton(Task)
    while Task.Run do
        if Task.Modifier ~= nil then
            if (not IsModifierPressed(Task.Modifier)) then
                PressAndReleaseMouseButtonAccurate(Task.Arg)
            elseif Task.FFInterval ~= nil then
                PressAndReleaseMouseButtonAccurate(Task.Arg)
            end
        else
            PressAndReleaseMouseButtonAccurate(Task.Arg)
        end
        Task = coroutine.yield()
        Sleep(20)
    end
end

-- 处理系统消息
function OnEvent(event, arg, family)
    local st = StateTimer

    if event == "MOUSE_BUTTON_PRESSED" and arg == ActiveButton then
        -- 创建所需协程
        for Key, Parameters in pairs(TableSkill) do
            AddTask(Key, Parameters)
        end
    elseif event == "MOUSE_BUTTON_RELEASED" and arg == ActiveButton then
        -- 移除所有协程
        AbortAllTask()
    elseif event == "PROFILE_ACTIVATED" then
        --  初始化
        ClearLog()
        OutputLogMessage("Script started !\n")
--        OutputLogMessage("Actual attack speed = "..ActualAttackSpeed.."\n")

        -- 轮询初始化
        InitPolling()
    elseif event == "PROFILE_DEACTIVATED" then
    end

    DoTasks()
    Poll(event, arg, family, st)
end

-- 轮询初始化
function InitPolling()
    ActiveState = GetMKeyState_Hook(POLL_FAMILY)
    SetMKeyState_Hook(ActiveState, POLL_FAMILY)
end

-- 轮询
function Poll(event, arg, family, st)
    if st == nil and StateTimer ~= nil then return end
    if st ~= nil then OutputLogMessage("event:"..event.."  arg:"..arg.."  family:"..family.."  st:"..st.."\n"); end
    local t = GetRunningTime()
    if family == POLL_FAMILY then
        if event == "M_PRESSED" and arg ~= ActiveState then
            if StateTimer ~= nil and t >= StateTimer then StateTimer = nil end
            if StateTimer == nil then ActiveState = arg end
            StateTimer = t + POLL_DEADTIME
        elseif event == "M_RELEASED" and arg == ActiveState then
            Sleep(POLL_INTERVAL)
            SetMKeyState_Hook(ActiveState, POLL_FAMILY)
        end
    end
end

GetMKeyState_Hook = GetMKeyState
GetMKeyState = function(family)
    family = family or "kb"
    if family == POLL_FAMILY then
        return ActiveState
    else
        return GetMKeyState_Hook(family)
    end
end

SetMKeyState_Hook = SetMKeyState
SetMKeyState = function(mkey, family)
    family = family or "kb"
    if family == POLL_FAMILY then
        if mkey == ActiveState then return end
        ActiveState = mkey
        StateTimer = GetRunningTime() + POLL_DEADTIME
    end
    return SetMKeyState_Hook(mkey, family)
end


-- 任务管理函数

TaskList = {}

-- 遍历任务列表，执行任务协程
function DoTasks()
    local t = GetRunningTime()
    for Key, Task in pairs(TaskList) do
        if t >= Task.Time then
            local s = coroutine.resume(Task.Task, Task)
            if (not s) then
                TaskList[Key] = nil
            else
                local tmpInterval = Task.Interval
                if Task.Modifier ~= nil then
                    if IsModifierPressed(Task.Modifier) then
                        if Task.FFInterval ~= nil then
                            tmpInterval = Task.FFInterval
                        end
                    end
                end
                Task.Time = Task.Time + tmpInterval
            end
        end
    end
end

-- 添加任务
function AddTask(Key, Parameters)
    local Task = {}
    Task.Time = GetRunningTime()
    if Parameters["Family"] == "mouse" then
        Task.Task = coroutine.create(KeepPressAndReleaseMouseButton)
    else
        Task.Task = coroutine.create(KeepPressAndReleaseKey)
    end

    Task.Arg = Parameters["Arg"]
    Task.Interval = Parameters["Interval"] - 20
    if Parameters["Modifier"] ~= nil then
        Task.Modifier = Parameters["Modifier"]
    end
    if Parameters["FFInterval"] ~= nil then
        Task.FFInterval = Parameters["FFInterval"] - 20
    end
    Task.Run = true

    TaskList[Key] = Task
end

-- 中止所有任务
function AbortAllTask()
    for Key, Task in pairs(TaskList) do
        if Task ~= nil then
            while true do
                Task.Run = false
                local s = coroutine.resume(Task.Task, Task)
                if (not s) then
                    TaskList[Key] = nil
                    break
                end
            end
        end
    end
end
